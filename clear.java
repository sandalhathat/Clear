package clear;


import javax.swing.JFileChooser;
import javax.swing.JDialog;
import java.io.File;
import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultRowSorter;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.RowFilter;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;



public class clear extends javax.swing.JFrame {

    /**
     * Creates new form clear
     */
    public clear() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        fileChooser = new javax.swing.JFileChooser();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        scan = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        fileChooser.setApproveButtonText("select");
        fileChooser.setCurrentDirectory(new java.io.File("C:\\Users\\dsknauss\\Desktop\\stuff\\medilynx"));
        fileChooser.setDialogTitle("select clear folder");
        fileChooser.setFileSelectionMode(javax.swing.JFileChooser.DIRECTORIES_ONLY);
        fileChooser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileChooserActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setAutoCreateRowSorter(true);
        jTable1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"1-1", "10-1", "1009-1", "5810-1", "5-1"},
                {"1-2", "10-2", "1009-2", "5810-2", "5-2"},
                {"1-3", "10-3", "1009-3", "5810-3", "5-3"},
                {"1-4", "10-4", "1009-4", "5810-4", "5-4"},
                {"1-4", "10-5", "1111-1", "5810-5", "5-5"},
                {"1-5", "12-1", "1111-2", "5810-6", "5-6"},
                {"1-6", "12-2", "1111-3", "6801-1", "6-1"},
                {"1-7", "12-3", "1111-4", "6801-2", "6-2"},
                {"2-1", "12-4", "1413", "6801-3", "6-3"},
                {"2-2", "13-1", "1152-1", "6801-4", "6-4"},
                {"2-3", "13-2", "1152-2", "7007-1", "7-1"},
                {"2-4", "13-3", "1152-3", "7007-2", "7-2"},
                {"2-5", "13-4", "1152-4", "7007-3", "7-3"},
                {"2-6", "13-5", "1152-5", "7007-4", "7-4"},
                {"3-1", "14-1", "1152-6", "9306-1", "7-5"},
                {"3-2", "14-2", "2212-1", "9306-2", "9-1"},
                {"3-3", "14-3", "2212-2", "9306-3", "9-2"},
                {"3-4", "14-4", "2212-3", "9306-4", "9-3"},
                {"3-5", "14-5", "2212-4", "9306-5", "9-4"},
                {"3-6", "14-6", "2212-5", "9306-6", "9-5"},
                {"3-7", "14-7", "2212-6", "9306-7", "9-6"},
                {"3803-1", "16-1", "3705-1", "9504-1", "9-7"},
                {"3803-2", "16-2", "3705-2", "9504-2", "TXCA"},
                {"3803-3", "16-3", "3705-3", "9504-3", "9808-1"},
                {"3803-4", "16-4", "3705-4", "9504-4", "9808-2"},
                {"3803-5", null, "3705-5", "9504-5", "9808-3"},
                {"", null, "3705-6", "9504-6", "9808-4"}
            },
            new String [] {
                "Plano/Intermountain", "Plano2", "L2", "L2-2", "San Fran/Other"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jTable1.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(jTable1);
        jTable1.getAccessibleContext().setAccessibleName(jButton3.getActionCommand());

        jButton3.setText("Select Clear Folder");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        scan.setText("scan");
        scan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jButton3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(scan, javax.swing.GroupLayout.PREFERRED_SIZE, 218, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 566, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 463, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton3)
                    .addComponent(scan))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
            // TODO add your handling code here:
        int returnVal = fileChooser.showOpenDialog(this);
        
        
    }//GEN-LAST:event_jButton3ActionPerformed

    private void fileChooserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileChooserActionPerformed
        // TODO add your handling code here:
        File fileName = fileChooser.getSelectedFile();
        File path = fileChooser.getCurrentDirectory();
        

        
    }//GEN-LAST:event_fileChooserActionPerformed

    private void scanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanActionPerformed
        // TODO add your handling code here:
        startApp();
        
    }//GEN-LAST:event_scanActionPerformed
    
    
    public void removeIfExist(String[] filesinFolderList) {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        
        int rowCount = dtm.getRowCount();
        for (String fileName : filesinFolderList) {
            // Iterate through each table row and get the String
            // server ID value for what is within the row cell of 
            // column 1 (Philly) and Column 2 (L2).
            for (int i = 0; i < rowCount; i++) {
                // Iterate through each column of the current row
                // and check for file name matches. Doesn't matter
                // how many table columns there are, we check them
                // all.
                for (int c = 0; c < dtm.getColumnCount(); c++) {
                    // Grab the string value in column 1 of current row.
                    Object serverID = dtm.getValueAt(i, c);
                    // Compare Server ID against file name but only if
                    // the serverID variable is not null.
                    if (serverID != null) {
                        String servrID = serverID.toString();
                        // Is the cell's String ID value the same as how the 
                        // file name starts? (using the startsWith() method is
                        // not good enough since server ID 1-1 and server ID 1-11
                        // or 1-111 would provide true - all start with 1-1. We
                        // split the file name based on the space between the 
                        // server/wrkStation ID and Initials and compare with the
                        // equals() method.
                        if (servrID.equals(fileName.split("\\s+")[0].trim())) {
                            // Yes it is so remove the row's column cell
                            // contents from JTable.
                            jTable1.getModel().setValueAt(null, i, c);
                            System.out.println("Found File Match In Literal Row " + (i + 1)
                                    + "/Column " + (c + 1) + " - Removed: " + servrID + 
                                    " From Table.");
                            break;
                        }
                    }
                }
                // Let's check the cells in next table row (if there is one)...
            }
            // Check next file name...
        }
        
        // Recheck table for empty Rows. If a Row is empty then delete it...
        // This cleans up the Table.
        for (int i = 0; i < rowCount; i++) {
            boolean notEmpty = false;
            for (int c = 0; c < dtm.getColumnCount(); c++) {
                if (dtm.getValueAt(i, c) != null && !dtm.getValueAt(i, c).toString().equals("")) {
                    notEmpty = true;
                    break;
                }
            }
            if (!notEmpty) {
                dtm.removeRow(i);
                i++; // Update outter for loop index
            }
        }
        // Force the JTable to update itself.
        dtm.fireTableDataChanged();
        
        
        
        
        
        /*TableRowSorter<TableModel> sorter = new TableRowSorter<>
        (jTable1.getModel());
        jTable1.setRowSorter(sorter);
        List<RowSorter.SortKey> sortKeys = new ArrayList<>();
        
        int columnIndexForPhilly = 0;
        sortKeys.add(new RowSorter.SortKey(columnIndexForPhilly,
                SortOrder.DESCENDING));
        
        int columnIndexForPhilly2 = 1;
        sortKeys.add(new RowSorter.SortKey(columnIndexForPhilly2,
                SortOrder.DESCENDING));
        
        int columnIndexForL2 = 2;
        sortKeys.add(new RowSorter.SortKey(columnIndexForL2,
                SortOrder.DESCENDING));
        
        int columnIndexForL3 = 3;
        sortKeys.add(new RowSorter.SortKey(columnIndexForL3,
                SortOrder.DESCENDING));
        
        int columnIndexForSanFran = 4;
        sortKeys.add(new RowSorter.SortKey(columnIndexForSanFran,
                SortOrder.DESCENDING));
        
        int columnIndexForIm = 5;
        sortKeys.add(new RowSorter.SortKey(columnIndexForIm,
                SortOrder.ASCENDING));
        
        
        sorter.setSortKeys(sortKeys);
        sorter.sort();*/
        
    }
    
        /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(clear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(clear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(clear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(clear.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                
                new clear().setVisible(true);
            }
        });

    }
    
    private void startApp(){
        System.out.println("Checking Files Directory Against Table ................");
        String folderPath = "C:\\Users\\dsknauss\\Desktop\\stuff\\medilynx";
        String[] filesinFolderList = getFilesListFromDirectory(folderPath, true);
        
        // No sense processing if there is nothing there.
        if (filesinFolderList == null) {
            JOptionPane.showMessageDialog(this, "<html>Either the supplied directory "
                    + "does not exist or it's<br>not a directory.  It could "
                    + "also be that there are no<br>files to process<br><br><b>"
                    + folderPath + "</b></html>", "No Files Names To Process!",
                    JOptionPane.WARNING_MESSAGE);
            System.exit(0); // Exit (close) Application.
        }

        // Update the JTable...
        removeIfExist(filesinFolderList);

    }
    
    
    
    public String[] getFilesListFromDirectory(String directoryPath, boolean... removeFileExtension) {
        File file = new File(directoryPath);
        if (!file.isDirectory()) {
            System.err.println("getFilesListFromDirectory() Method Error! "
                    + "The supplied directoy path does not lead to a directory!"
                     + "(" + directoryPath + ")"
                    );
            return null;
        }
        boolean noExtension = false;
        if (removeFileExtension.length > 0) {
            noExtension = removeFileExtension[0];
        }
        String[] files = file.list();
        // ArrayList to hold actual file names and 
        // not any directory names (if there are any)
        ArrayList<String> list = new ArrayList<>();
        for (String string : files) {
            if (new File(file.getPath() + File.separator + string).isFile()) {
                if (noExtension) {
                    if (string.lastIndexOf(".") > 0) {
                        if (string.split("\\.\\.").length > 1) {
                            list.add(string);
                        }
                        else {
                            list.add(string.substring(0, string.lastIndexOf(".")));
                        }
                    }
                    else {
                        list.add(string);
                    }
                }
                else {
                    list.add(string);
                }
            }
        }
        return list.toArray(new String[0]);
        
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFileChooser fileChooser;
    private final javax.swing.JButton jButton3 = new javax.swing.JButton();
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton scan;
    // End of variables declaration//GEN-END:variables
}
